// -*- go -*-
//
// Copyright (c) 2020 Markku Rossi
//
// All rights reserved.
//

package math

// Exp computes b**e mod |m| (i.e. the sign of m is ignore).
// TODO, use wildcard types: Exp(b, e, n uint<T>) uint<T>
func Exp(b, e, m uint64) uint64 {
	var r uint64 = 1

	for i := size(b) - 1; i >= 0; i = i - 1 {
		r = r * r % m
		// TODO: peephole optimizer can detect:
		//
		//   rshift  e{1,0}u64 $7 %_{0,451}u64
		//   band    %_{0,451}u64 $1 %_{0,452}u64
		//   neq     %_{0,452}u64 $0 %_{0,453}b1
		//
		// as:
		//
		//   rshift V1 Const1 V2
		//   band   V2 $1 V3
		//   neq    V3 $0 V4
		//
		// and replace it as:
		//
		//   test1  V1 Const1 V4
		//
		if e>>i&1 != 0 {
			r = r * b % m
		}
	}

	return r
}
